
##Isso aqui é uma tentativa bem top de fazer um arquivo puta documentado de diversos pseudo códigos (quem sabe com códigos no meio) de funções que são deveras úteis na vida.


Parte 1: Manipulação de números
	. Manipular dígito à dígito.

Parte 2: Algoritmos e Estrutura de Dados
	. Criando uma Lista
	. Adicionando funções de Pilha
	. Adicionando funções de Fila
	.Criando uma Avl Tree
	.Criando uma MinHeap
	.Criando uma Maxheap


Parte 3: Algoritmos de Sorting
	. MergeSort
	
Parte 4: Matemática
	. Contar número de fatores primos de um número
	. Sequencia de Fibonacci
	. Conversores código decimal - binário e decimal-hexadex

Parte 5: Strings
	. Inverter uma string

@@@@@@@@@@@@@@@@@@@@@@@@@@ PARTE 1 @@@@@@@@@@@@@@@@@@@@@@ PARTE 1 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

.Contar quantos digitos tem um número
	
Função conta numeros(inteiro n)
//Recebe um inteiro
//Retorna o número de digitos desse inteiro
//Basicamente a ideia aqui é retonar o resto 10 do número, e dividir ele por 10 depois, e ir fazendo isso até ele 
//ser 0.
{
	inteiro copia = n;
	inteiro contador = 0;
	enquanto(copia > 0){
		inteiro digito = copia%10;
		contador++;
		copia = copia/10;
	}
	retorne contador;
}
//Podemos com isso fazer oque quisermos com tais dígitos, com a variável dígito.




@@@@@@@@@@@@@@@@@@@@@@@@@@ PARTE 2 @@@@@@@@@@@@@@@@@@@@@@ PARTE 2 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

.Criando uma lista
	//eh bem variado, depende muito da linguagem, então farei tanto em Java quanto em Cpp, futuralmente
	//talvez adicione mais
		.C++

	{
		struct no{
			int valor;
			no* next;
		};

		class lista{
			private:
			no* head,tail;
			public:
			lista(){
				//constructor
				head = NULL;
				tail = NULL;			
			}
		}
	}


 .Pilha(usando as listas criadas antes)
 		.C++

 	{
 		void push(int valor){
 			no* temp = new node();
 			temp->valor = valor;
 			temp->next = NULL;
 			if(head == NULL){
 				head = temp;
 				tail = temp;
 			}

 			tail->next = temp;
 			tail = tail->next;
 		}

 		void pop(){
 			no* temp = new node();
 			no* tempPrev = new node();
 			temp = head;
 			if(temp == NULL){
 				throw exception("there are no elements to pop");
 			}
 			while(temp->next != NULL){
 				tempPrev = temp;
 				temp= temp->next;
 			}
 			tail = tempPrev;
 			tempPrev->next = NULL;
 			delete temp;
 		}
 	}


 .Fila(Usando a lista criada antes)
 	{
 		void dequeue(){
 			no* temp = new no();
 			temp = head;
 			head = head->next;
 			delete(temp);
 		}
 		
 		//enqueue é o mesmo que push
 	}
	
	
  .AvlTree
  	struct avlNode{
	    int key;
	    int altura;
	    avlNode* esquerda;
	    avlNode* direita;
	};


	class avlTree{
	private:
	    avlNode* raiz;
	public:
	    avlTree(){
		raiz = NULL;
	    }

	    avlNode* root(){
		return raiz;
	    }

	    avlNode* insert(avlNode* atual, int key){
		if(raiz == NULL){
		    atual = new avlNode();
		    atual->key = key;
		    atual->esquerda = NULL;
		    atual->direita = NULL;
		    atual->altura = 0;
		    raiz = atual;
		}
	       else if(atual == NULL){
		    atual = new avlNode();
		    atual->key = key;
		    atual->esquerda = NULL;
		    atual->direita = NULL;
		    atual->altura = 0;
		}

		else if(atual->key > key){
		    atual->esquerda = insert(atual->esquerda, key);
		    if(altura(atual->esquerda) - altura(atual->direita) >= 2){
			if(key < atual->esquerda->key){
			    atual = rightRotation(atual);
			}
			else{
			    atual = rightRightRotation(atual);
			}
		    }
		}

		else if(atual->key < key){
		    atual->direita = insert(atual->direita, key);
		    if(altura(atual->direita) - altura(atual->esquerda) >= 2){
			if(key > atual->direita->key){
			    atual = leftRotation(atual);
			}
			else{
			    atual = leftLeftRotation(atual);
			}
		    }
		}

		atual->altura = max(altura(atual->direita), altura(atual->esquerda)) + 1;
		return atual;

	    }

	    int altura(avlNode* x){
		if(x==NULL){
		return 0;
		}
		return x->altura;
	    }

	    avlNode* leftRotation(avlNode* &t){
		avlNode* u = t->direita;
		t->direita = u->esquerda;
		u->esquerda = t;
		t->altura = max(altura(t->esquerda), altura(t->direita))+1;
		u->altura = max(altura(t->direita), t->altura)+1 ;
		return u;
	    }

	    avlNode* rightRotation(avlNode* &t){
		avlNode* u = t->esquerda;
		t->esquerda = u->direita;
		u->direita = t;
		t->altura = max(altura(t->esquerda), altura(t->direita))+1;
		u->altura = max(altura(u->esquerda), t->altura)+1;
		return u;
	    }

	    avlNode* leftLeftRotation(avlNode* &t){
		t->direita = rightRotation(t->direita);
		return leftRotation(t);
	    }
	    avlNode* rightRightRotation(avlNode* &t){
		t->esquerda = leftRotation(t->esquerda);
		return rightRotation(t);
	    }


	    void preOrder(avlNode* atual){
		if(atual == NULL){
		    return;
		}

		cout << atual->key << endl;
		preOrder(atual->esquerda);
		preOrder(atual->direita);

	    }
	};
	
	.MinHeap
		{
			class minHeap{

			private:
				int* arr;
				int capacity;
				int size;

			public:
				minHeap(int cap){
					size = 0;
					capacity = cap;
					arr = new int[cap];
				}

				int length(){
					return size;
				}

				int root(){
					return arr[0];
				}

				int parent(int i ){
					return (i-1)/2;
				}

				int leftChild(int i){
					return i*2 + 1;
				}

				int rightChild(int i){
					return i*2 + 2;
				}

				void insert(int key){
					if(size == capacity){
						cout << "Full" << endl;
						return;
					}
					int i = size;
					arr[i] = key;
					size++;

					while(i!= 0 && arr[i] < arr[parent(i)]){
						int temp = arr[parent(i)];
						arr[parent(i)] = arr[i];
						arr[i] = temp;
						i=parent(i);
					}
				}


				void heapify(int i){
					int smallest = i;
					int l = leftChild(i);
					int r = rightChild(i);
					if(l < size && arr[l] < arr[i]){
						smallest = l;
					}
					if(r < size && arr[r] < arr[smallest]){
						smallest = r;
					}
					if(smallest != i){
						int temp = arr[i];
						arr[i] = arr[smallest];
						arr[smallest] = temp;
						heapify(smallest);
					}
				}

				int pop(){
					if(size <= 0){
						cout << "tem oq remover nao" << endl;
						return -1;
					}	
					if(size == 1){
						size--;
						return arr[0];
					}

					int root = arr[0];
					arr[0] = arr[size -1 ];
					size--;
					heapify(0);
					return root;
				}


			};
		}

	.MaxHeap
	{
		class maxHeap{
	private:
		int * arr;
		int capacity;
		int size;
	public:	
		maxHeap(int cap){
			capacity = cap;
			size = 0;
			arr = new int[cap];
		}

		int length(){
			return size;
		}

		int root(){
			return arr[0];
		}

		int parent(int i ){
			return (i-1)/2;
		}

		int leftChild(int i){
			return i*2 + 1;
		}

		int rightChild(int i){
			return i*2 + 2;
		}


		void insert(int key){
			if(size == capacity){
				cout << "FULL" << endl;
				return;
			}

			int i = size;
			arr[i] = key;
			size++;

			while(i!=0 && arr[i] > arr[parent(i)]){
				int temp =arr[parent(i)];
				arr[parent(i)] = arr[i];
				arr[i] = temp;
				i = parent(i);
			}
		}

		void heapify(int i){
			int biggest = i;
			int l = leftChild(i);
			int r = rightChild(i);
			if(l < size && arr[l] > arr[i]){
				biggest = l;
			}
			if(r < size && arr[r] > arr[biggest]){
				biggest = r;
			}
			if(biggest != i){
				int temp = arr[i];
				arr[i] = arr[biggest];
				arr[biggest] = temp;
				heapify(biggest);
			}
		}

		int pop(){
			if(size == 0){
				return;
			}
			if(size == 1){
				size--;
				return arr[0];
			}

			int root = arr[0];
			arr[0] = arr[size-1];
			size--;
			heapify(0);
			return root;
		}
	};
	}

@@@@@@@@@@@@@@@@@@@@@@@@@@ PARTE 3 @@@@@@@@@@@@@@@@@@@@@@ PARTE 3 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

	.MergeSort
		{
			void merge(int arr[], int left, int mid, int right){

				int n1 = mid - left + 1;
				int n2 = right - mid;
				int leftArr[n1];
				int rightArr[n2];
				//fill both arrays
				for(int i =0;i<n1;i++){
					leftArr[i] = arr[i+left];
				}
				for(int j =0;j<n2;j++){
					rightArr[j] = arr[left+mid+j];
				}

				int iLeft = 0;
				int iRight = 0;
				int iMerge = left;
				while(iLeft < n1 && iRight < n2){
					if(leftArr[iLeft] <= rightArr[iRight]){
						arr[iMerge] = leftArr[iLeft];
						iLeft++;
					}
					else if(rightArr[iRight] < leftArr[iLeft]){
						arr[iMerge] = rightArr[iRight];
						iRight++;
					}
					iMerge++;
				}

				while(iLeft < n1){
					arr[iMerge] = leftArr[iLeft];
					iLeft++;
					iMerge++;
				}
				while(iRight < n2){
					arr[iMerge] = rightArr[iRight];
					iRight++;
					iMerge++;
				}
				return;
			}

			void mergeSort(int arr[], int left, int right){
			//quando passar um array que é únitário, n faz nada com ele, acho
				if(left < right){
				//o ponto do meio é
					int mid = left+right/2;
					mergeSort(arr,left, mid);
					mergeSort(arr, mid+1, right);
					merge(arr, left, mid, right);
				}
			return;
			}
		}


@@@@@@@@@@@@@@@@@@@@@@@@@@ PARTE 4 @@@@@@@@@@@@@@@@@@@@@@ PARTE 4 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

.Contando o número de fatores primos

	função FatoresPrimos(int n){
	//recebe um inteiro
	//retorna o número de fatores primos que ele tem

		int nFatoresPrimos = 0;
		//enquanto o número for par, seu fator primo é 2.
		enquanto(n%2==0){
			nFatoresPrimos++;
			n=n/2;
		}

		para(int i =3;i<=sqrt(n);i+=2){
			//achou um fator, agora checa-se quantas vezes ele repete
			while(n%i==0){
				nFatoresPrimos++;
				n = n/i;
			}
		}

		se(n>2){
			//o número atingiu um número primo
			nFatoresPrimos++;
		}
	}


.Sequencia de Fibonacci

	função fibonacci(int n){
		//dado uma pocisão n, retorna o número que está nessa sequencia
		int fib[n];
		for(int i =0;i<n;i++){
			//base para fib
			if(i == 0 || i==1){
				fib[i] == 1;
			}
			//resto de fib
			else{
				fib[i] = fib[i-1] + fib[i-2];
			}
		}
	}



.Conversor Decimal-Binário
		função conversorDecBin(int n){
			string binario;
			while( n > 0){
				if(n%2==0){
					binario += '0';
				}
				else if(n%2!=0){
					binario += '1';
				}
				n=n/2;
			}
			return binario;
		}

.conversor Decimal-Hexadex
		função conversorDexHex(int n){
			string hex;
			map(10, 'A';
				11, 'B';
				12, 'C';
				13, 'D';
				14, 'E';
				15, 'F';)

			while(n>0){
				if(n%16 >= 10){
					hex += map(n%16);
				}
				else if(n%16 < 10){
					hex += toString(n%16);
				}
				n = n/16;
			}
		}






@@@@@@@@@@@@@@@@@@@@@@@@@@ PARTE 5 @@@@@@@@@@@@@@@@@@@@@@ PARTE 5 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


	.Inversor de strings
		função inverteString(string s){
			for(int i = 0; i<(s.length()/2)-1 ;i++){
				string temp = '';
				temp = s[i];
				s[i] = s[s.length() - i];
				s[s.length() - i] = temp;
			}
		}
